@use 'sass:map';
@use '@angular/material' as mat;

@mixin core() {
  body,
  html {
    margin: 0;
    height: 100%;

    // font-family: Roboto, sans-serif;
  }

  figure {
    margin: 0;
  }

  fieldset {
    margin: 0;
    padding: 0;
    border: 0;
  }

  .sticky {
    transition: top 0.2s ease-in;
  }

  .tabbed-container {
    min-height: calc(100vh - 25rem);
  }

  .spacer {
    flex: 1 1 auto;
  }

  .mat-mdc-progress-spinner {
    margin: 3rem auto 5rem;
  }

  a {
    text-decoration: none;
  }

  .red-card,
  .yellow-card {
    width: 0.75rem;
    height: 1rem;
    display: inline-block;

    @include mat.elevation(1);
  }

  .yellow-card {
    background-color: yellow;
  }

  .red-card {
    background-color: red;
  }

  app-main:not(:empty) + .pre-bootstrap {
    background-color: transparent;
    animation: leave-animation 0.2s ease-in-out forwards;
  }

  content-loader svg {
    max-height: 100%;
  }

  .cdk-virtual-scroll-content-wrapper {
    width: 100%;
    overflow: hidden;
  }

  .placeholder {
    font-size: 2rem;
    display: flex;
    height: 100%;
    align-items: center;
    justify-content: center;
  }

  @keyframes leave-animation {
    0% {
      opacity: 1;
    }

    100% {
      opacity: 0;
      transform: scale(0);
      display: none;
    }
  }
}

@mixin color($theme) {
  $primary: map.get($theme, primary);
  $accent: map.get($theme, accent);
  $foreground: map.get($theme, foreground);
  $background: map.get($theme, background);

  .mat-text-accent {
    color: mat.get-color-from-palette($accent);
  }

  .mat-text-primary {
    color: mat.get-color-from-palette($primary);
  }

  ::selection {
    background: mat.get-color-from-palette($accent);
    color: mat.get-color-from-palette($accent, default-contrast);
  }

  .placeholder {
    background-color: mat.get-color-from-palette($background, 'status-bar');
    color: mat.get-color-from-palette($foreground, 'secondary-text');
  }
}

@mixin density($theme) {
}

@mixin typography($theme) {
}

@mixin theme($theme) {
  @include core;

  @include mat.private-check-duplicate-theme-styles($theme, 'styles') {
    $color: mat.get-color-config($theme);
    $density: mat.get-density-config($theme);
    $typography: mat.get-typography-config($theme);

    @if $color {
      @include color($color);
    }

    @if $density {
      @include density($density);
    }

    @if $typography {
      @include typography($typography);
    }
  }
}
