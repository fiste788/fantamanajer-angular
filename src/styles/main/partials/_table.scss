@use 'sass:map';
@use 'sass:color';
@use '@angular/material' as mat;

@mixin core($theme) {
  .mat-mdc-table {
    width: 100%;
    border-radius: 4px;

    thead > .mat-mdc-header-row {
      border-radius: 4px;
    }
  }

  .table-container {
    overflow-x: auto;
    border-radius: 4px;
  }

  .table-container:not([class*='mat-elevation-z']) {
    @include mat.elevation(1);
  }

  .mat-mdc-table-header {
    width: 100%;
    padding: 1.25rem 1.5rem;
    min-height: 4rem;
    text-align: left;
    box-sizing: border-box;
    display: inline-flex;
    align-items: center;
    position: relative;
    justify-content: space-between;
    overflow: hidden;
  }

  .mat-mdc-table-header-selected {
    position: absolute;
    top: 0;
    left: 0;
    padding: 1.25rem 1.5rem;
    align-items: center;
    width: 100%;
    height: 100%;
    box-sizing: border-box;
    justify-content: space-between;
    animation: slide-down 250ms ease-in;
  }

  .mat-mdc-table-title {
    font-size: 20px;
  }

  .mat-mdc-cell,
  .mat-mdc-header-cell {
    padding-right: 1rem;
  }

  .mat-cell-numeric,
  .mat-footer-cell-numeric,
  .mat-header-cell-numeric {
    text-align: right !important;

    .mat-sort-header-container {
      flex-direction: row-reverse;
    }

    .mat-sort-header-arrow {
      margin: 0 6px 0 0;
    }
  }

  @keyframes slide-down {
    0% {
      opacity: 0;
      transform: translateY(-100%);
    }

    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }
}

@mixin color($theme) {
  $accent: map.get($theme, accent);
  $background: map.get($theme, background);
  $foreground: map.get($theme, foreground);

  .mat-mdc-table {
    .mat-mdc-row:hover .mat-mdc-cell {
      $app-background: mat.get-color-from-palette($background, 'background');
      $badge-color: mat.get-color-from-palette($background, 'hover');

      // The disabled color usually has some kind of opacity, but because the badge is overlayed
      // on top of something else, it won't look good if it's opaque. If it is a color *type*,
      // we convert it into a solid color by taking the opacity from the rgba value and using
      // the value to determine the percentage of the background to put into foreground when
      // mixing the colors together.
      @if type-of($badge-color) == color and type-of($app-background) == color {
        $badge-opacity: opacity($badge-color);

        background-color: color.mix(
          $app-background,
          rgba($badge-color, 1),
          (1 - $badge-opacity) * 100%
        );
      } @else {
        background-color: $badge-color;
      }
    }

    .mat-mdc-table-sticky-border-elem-right {
      border-left: 1px solid mat.get-color-from-palette($foreground, divider);
    }

    .mat-mdc-table-sticky-border-elem-left {
      border-right: 1px solid mat.get-color-from-palette($foreground, divider);
    }
  }

  .table-container {
    background-color: mat.get-color-from-palette($background, 'card');
  }

  .mat-mdc-table-header {
    background-color: mat.get-color-from-palette($background, 'card');
  }

  .mat-mdc-table-header-selected {
    background-color: mat.get-color-from-palette($accent, 50);
  }
}

@mixin density($theme) {
}

@mixin typography($theme) {
}

@mixin theme($theme) {
  @include core($theme);

  @include mat.private-check-duplicate-theme-styles($theme, 'table') {
    $color: mat.get-color-config($theme);
    $density: mat.get-density-config($theme);
    $typography: mat.get-typography-config($theme);

    @if $color {
      @include color($color);
    }

    @if $density {
      @include density($density);
    }

    @if $typography {
      @include typography($typography);
    }
  }
}
